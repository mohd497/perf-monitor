require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TestsController, type: :controller do

  let(:test) {{ url: 'https://facebook.com', max_ttfb: 80, max_tti: 80, max_speed_index: 80, max_ttfp: 80 }}

  it "should send json response success" do
    
    post :create, params: {test: test}
      expect(response).to be_success
  end

  it "should not pass with low max settings" do
    
    post :create, params: {test: test}
      expect(JSON.parse(response.body)['passed']).to eq(false)
  end

  it "should not pass with low max settings" do
    
    post :create, params: {test: test}
      expect(JSON.parse(response.body)['passed']).to eq(false)
  end 

  it "should give last result back when fetching" do
    post :create, params: {test: test}
    get :show, params: {url: 'https://facebook.com'}
      expect(JSON.parse(response.body)['max_ttfb']).to eq(80)
      expect(JSON.parse(response.body)['max_tti']).to eq(80)
      expect(JSON.parse(response.body)['max_speed_index']).to eq(80)
      expect(JSON.parse(response.body)['url']).to eq('https://facebook.com')
      expect(JSON.parse(response.body)['is_passed']).to eq(false)
  end

  it "should send back array of results when index" do
    post :create, params: {test: test}
    get :index, params: {url: 'https://facebook.com'}
      expect(JSON.parse(response.body)).to be_an(Array) 
  end  

  it "should send back array of results with only one created when index" do
    post :create, params: {test: test}
    get :index, params: {url: 'https://facebook.com'}
      expect(JSON.parse(response.body)[0]['max_ttfb']).to eq(80)
      expect(JSON.parse(response.body)[0]['max_tti']).to eq(80)
      expect(JSON.parse(response.body)[0]['max_speed_index']).to eq(80)
      expect(JSON.parse(response.body)[0]['url']).to eq('https://facebook.com')
      expect(JSON.parse(response.body)[0]['is_passed']).to eq(false)
  end 

end
